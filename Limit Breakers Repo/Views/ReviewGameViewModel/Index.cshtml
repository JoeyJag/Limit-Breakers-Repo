@model IEnumerable<Limit_Breakers_Repo.Models.ReviewGameViewModel>

<style>
    body {
        background-image: url('../../Content/background/cascadebackground.jpg');
        background-attachment: fixed;
        background-size:cover;
        color:black;
    }

    table {
        border-spacing: 0;
        width: 100%;
        border: 2px solid #ddd;
    }

    th {
        cursor: pointer;
    }

    th, td {
        text-align: left;
        padding: 16px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }
</style>



<h2>Reviews</h2> <br />


<table id="Review" class="table">
    <tr>
        <th onclick="sortTable(0)">
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReviewOfGame)
        </th>
        <th onclick="sortTable(1)">
            @Html.DisplayNameFor(model => model.Rating)
    </th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td align="center">
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td align="center">
            @Html.DisplayFor(modelItem => item.ReviewOfGame)
        </td>
        <td align="center">
            @Html.DisplayFor(modelItem => item.Rating)
        </td>
  
    </tr>
}

</table>
<script>
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("Review");
  switching = true;
  //Set the sorting direction to ascending:
  dir = "asc";
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /*If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again.*/
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}
</script>